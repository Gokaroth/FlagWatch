

// NOTE: This app no longer uses the Gemini API for cleanliness reports.
// It has been replaced with a real scientific data source from Copernicus Marine Service.

const APP_VERSION = '9.0.0'; // Increment this to show the popup for new users/updates

/**
 * Configuration for the "What's New" popup.
 * To show the popup, ensure the `version` here matches `APP_VERSION`.
 * The content is dynamically built from the `features` array and supports multiple languages.
 */
const WHATS_NEW_CONFIG = {
    version: '9.0.0',
    features: [
        {
            title: {
                en: 'üèñÔ∏è Massive Beach Expansion!',
                bg: 'üèñÔ∏è –ú–∞—â–∞–±–Ω–æ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏–µ –Ω–∞ –ø–ª–∞–∂–æ–≤–µ—Ç–µ!'
            },
            description: {
                en: "We've massively expanded our database from 15 to nearly 50 beaches! The app now covers the entire Bulgarian Black Sea coast, from Durankulak to Rezovo, including popular wild beaches.",
                bg: "–†–∞–∑—à–∏—Ä–∏—Ö–º–µ –º–∞—â–∞–±–Ω–æ –±–∞–∑–∞—Ç–∞ —Å–∏ –¥–∞–Ω–Ω–∏ –æ—Ç 15 –Ω–∞ –±–ª–∏–∑–æ 50 –ø–ª–∞–∂–∞! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –≤–µ—á–µ –ø–æ–∫—Ä–∏–≤–∞ —Ü—è–ª–æ—Ç–æ –±—ä–ª–≥–∞—Ä—Å–∫–æ –ß–µ—Ä–Ω–æ–º–æ—Ä–∏–µ, –æ—Ç –î—É—Ä–∞–Ω–∫—É–ª–∞–∫ –¥–æ –†–µ–∑–æ–≤–æ, –≤–∫–ª—é—á–∏—Ç–µ–ª–Ω–æ –ø–æ–ø—É–ª—è—Ä–Ω–∏ –¥–∏–≤–∏ –ø–ª–∞–∂–æ–≤–µ."
            },
        },
        {
            title: {
                en: 'üî¨ Real Scientific Algae Data',
                bg: 'üî¨ –ù–∞—É—á–Ω–∏ –¥–∞–Ω–Ω–∏ –∑–∞ –≤–æ–¥–æ—Ä–∞—Å–ª–∏ –≤ —Ä–µ–∞–ª–Ω–æ –≤—Ä–µ–º–µ'
            },
            description: {
                en: "Cleanliness reports are now powered by real satellite data from the EU's Copernicus Marine Service, providing accurate, science-based algae bloom information.",
                bg: "–î–æ–∫–ª–∞–¥–∏—Ç–µ –∑–∞ —á–∏—Å—Ç–æ—Ç–∞ –≤–µ—á–µ —Å–µ –±–∞–∑–∏—Ä–∞—Ç –Ω–∞ —Ä–µ–∞–ª–Ω–∏ —Å–∞—Ç–µ–ª–∏—Ç–Ω–∏ –¥–∞–Ω–Ω–∏ –æ—Ç –ú–æ—Ä—Å–∫–∞—Ç–∞ —Å–ª—É–∂–±–∞ –Ω–∞ –ï–° ‚Äû–ö–æ–ø–µ—Ä–Ω–∏–∫‚Äú, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—è–π–∫–∏ —Ç–æ—á–Ω–∞, –Ω–∞—É—á–Ω–æ–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —Ü—ä—Ñ—Ç–µ–∂–∞ –Ω–∞ –≤–æ–¥–æ—Ä–∞—Å–ª–∏."
            },
        },
        {
            title: {
                en: 'üåó Full Dark Mode Support',
                bg: 'üåó –ü—ä–ª–Ω–∞ –ø–æ–¥–¥—Ä—ä–∂–∫–∞ –Ω–∞ —Ç—ä–º–µ–Ω —Ä–µ–∂–∏–º'
            },
            description: {
                en: "Enjoy a beautiful new dark theme, perfect for night-time viewing. Find the toggle in the Settings menu (‚öôÔ∏è). It also respects your system's default theme!",
                bg: "–ù–∞—Å–ª–∞–¥–µ—Ç–µ —Å–µ –Ω–∞ –∫—Ä–∞—Å–∏–≤–∞ –Ω–æ–≤–∞ —Ç—ä–º–Ω–∞ —Ç–µ–º–∞, –∏–¥–µ–∞–ª–Ω–∞ –∑–∞ –Ω–æ—â–Ω–æ –≥–ª–µ–¥–∞–Ω–µ. –ù–∞–º–µ—Ä–µ—Ç–µ –ø—Ä–µ–≤–∫–ª—é—á–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é—Ç–æ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (‚öôÔ∏è). –¢—è —Å—ä—â–æ —Ç–∞–∫–∞ —É–≤–∞–∂–∞–≤–∞ —Ç–µ–º–∞—Ç–∞ –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ –Ω–∞ –≤–∞—à–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–∞!"
            },
        },
        {
            title: {
                en: 'üó∫Ô∏è Enhanced Map Markers',
                bg: 'üó∫Ô∏è –ü–æ–¥–æ–±—Ä–µ–Ω–∏ –º–∞—Ä–∫–µ—Ä–∏ –Ω–∞ –∫–∞—Ä—Ç–∞—Ç–∞'
            },
            description: {
                en: "See the cleanliness status at a glance! Beach markers on the map now include a small colored dot to indicate algae conditions.",
                bg: "–í–∏–∂—Ç–µ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ —á–∏—Å—Ç–æ—Ç–∞—Ç–∞ —Å –µ–¥–∏–Ω –ø–æ–≥–ª–µ–¥! –ú–∞—Ä–∫–µ—Ä–∏—Ç–µ –Ω–∞ –ø–ª–∞–∂–æ–≤–µ—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–∞—Ç–∞ –≤–µ—á–µ –≤–∫–ª—é—á–≤–∞—Ç –º–∞–ª–∫–∞ —Ü–≤–µ—Ç–Ω–∞ —Ç–æ—á–∫–∞, –∫–æ—è—Ç–æ –ø–æ–∫–∞–∑–≤–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ –≤–æ–¥–æ—Ä–∞—Å–ª–∏—Ç–µ."
            },
        },
         {
            title: {
                en: 'üéÅ See Updates Anytime',
                bg: 'üéÅ –í–∏–∂—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏—Ç–µ –ø–æ –≤—Å—è–∫–æ –≤—Ä–µ–º–µ'
            },
            description: {
                en: "Missed what's new? You can now open this update panel anytime by clicking the gift icon (üéÅ) in the header.",
                bg: "–ü—Ä–æ–ø—É—Å–Ω–∞–ª–∏ —Å—Ç–µ –∫–∞–∫–≤–æ –µ –Ω–æ–≤–æ—Ç–æ? –í–µ—á–µ –º–æ–∂–µ—Ç–µ –¥–∞ –æ—Ç–≤–æ—Ä–∏—Ç–µ —Ç–æ–∑–∏ –ø–∞–Ω–µ–ª —Å –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –≤—Å—è–∫–æ –≤—Ä–µ–º–µ, –∫–∞—Ç–æ –∫–ª–∏–∫–Ω–µ—Ç–µ –≤—ä—Ä—Ö—É –∏–∫–æ–Ω–∞—Ç–∞ –∑–∞ –ø–æ–¥–∞—Ä—ä–∫ (üéÅ) –≤ –∑–∞–≥–ª–∞–≤–Ω–∞—Ç–∞ —á–∞—Å—Ç."
            },
        }
    ]
};

// Bulgarian Black Sea Beach Safety App
class BeachSafetyApp {
    // Class properties
    currentLanguage;
    userLocation;
    map;
    markers;
    beaches;
    currentView;
    currentFilter;
    isOffline;
    currentBeach;
    deferredPrompt;
    userLocationMarker;

    constructor() {
        this.currentLanguage = localStorage.getItem('beach-app-language') || 'en';
        this.userLocation = null;
        this.map = null;
        this.markers = [];
        this.beaches = [];
        this.currentView = 'map';
        this.currentFilter = 'all';
        this.isOffline = !navigator.onLine;
        this.currentBeach = null;
        this.deferredPrompt = null;
        this.userLocationMarker = null;
        
        // Expose the app instance to the global scope for event handlers in HTML
        window.app = this;
        
        // Initialize app
        this.init();
    }

    async init() {
        // Setup event listeners
        this.setupEventListeners();
        
        // Apply theme early to avoid flash of light mode
        this.applyTheme();

        // Apply language
        this.applyLanguage();
        
        // Load beach and cleanliness data
        await this.loadBeachData();
        await this.loadCleanlinessData();
        
        // Initialize map after a short delay
        setTimeout(() => {
            this.initializeMap();
        }, 500);
        
        // Setup PWA
        this.setupPWA();
        
        // Request location permission
        this.requestLocation();
        
        // Render initial views
        this.renderAllLists();
        
        // Hide loading screen
        setTimeout(() => {
            document.getElementById('loading-screen').style.display = 'none';
            document.getElementById('app').classList.remove('hidden');
            // Ensure map size is correct
            if (this.map) {
                setTimeout(() => this.map.invalidateSize(), 100);
            }
            // Check for new features
            this.checkWhatsNew();
        }, 2000);
        
        // Setup offline/online handlers
        this.setupNetworkHandlers();

        // Setup periodic data refresh
        setInterval(async () => {
            if (!this.isOffline) {
                console.log('Refreshing weather and cleanliness data...');
                await this.loadBeachData();
                await this.loadCleanlinessData();
                this.updateAllViews();
            }
        }, 30 * 60 * 1000); // 30 minutes
    }
    
    updateAllViews() {
        this.renderAllLists();
        if (this.map) {
            this.addBeachMarkers();
        }
        if (this.currentBeach) {
            const updatedBeach = this.beaches.find(b => b.id === this.currentBeach.id);
            if (updatedBeach) {
                this.currentBeach = updatedBeach;
                this.refreshBeachDetailModal();
            }
        }
    }

    async loadBeachData() {
        // Caching logic for beach data
        const cachedBeaches = localStorage.getItem('beach-app-data');
        if (cachedBeaches) {
            this.beaches = JSON.parse(cachedBeaches);
        }

        const beachData = {
            "priority_beaches": [
                // North Coast
                { "id": "durankulak_north", "name": "Durankulak North", "name_bg": "–î—É—Ä–∞–Ω–∫—É–ª–∞–∫ - –°–µ–≤–µ—Ä", "coordinates": {"lat": 43.684, "lng": 28.575}, "region": "Dobrich", "type": "wild", "facilities": {"camping": true}, "description": "Pristine wild beach near the Romanian border, next to Durankulak Lake.", "description_bg": "–î–µ–≤—Å—Ç–≤–µ–Ω –¥–∏–≤ –ø–ª–∞–∂ –¥–æ —Ä—É–º—ä–Ω—Å–∫–∞—Ç–∞ –≥—Ä–∞–Ω–∏—Ü–∞, –¥–æ –î—É—Ä–∞–Ω–∫—É–ª–∞—à–∫–æ—Ç–æ –µ–∑–µ—Ä–æ." },
                { "id": "krapets", "name": "Krapets", "name_bg": "–ö—Ä–∞–ø–µ—Ü", "coordinates": {"lat": 43.633, "lng": 28.570}, "region": "Dobrich", "type": "wild", "facilities": {"camping": true, "restaurants": true}, "description": "Long, quiet sandy beach backed by dunes and fields.", "description_bg": "–î—ä–ª—ä–≥, —Ç–∏—Ö –ø—è—Å—ä—á–µ–Ω –ø–ª–∞–∂, –∑–∞–æ–±–∏–∫–æ–ª–µ–Ω –æ—Ç –¥—é–Ω–∏ –∏ –ø–æ–ª—è." },
                { "id": "shabla", "name": "Shabla Lighthouse Beach", "name_bg": "–ü–ª–∞–∂ –ø—Ä–∏ —Ñ–∞—Ä –®–∞–±–ª–∞", "coordinates": {"lat": 43.545, "lng": 28.599}, "region": "Dobrich", "type": "wild", "facilities": {}, "description": "Rugged, scenic beach near Bulgaria's oldest lighthouse.", "description_bg": "–°–∫–∞–ª–∏—Å—Ç, –∂–∏–≤–æ–ø–∏—Å–µ–Ω –ø–ª–∞–∂ –¥–æ –Ω–∞–π-—Å—Ç–∞—Ä–∏—è —Ñ–∞—Ä –≤ –ë—ä–ª–≥–∞—Ä–∏—è." },
                { "id": "bolata", "name": "Bolata Beach", "name_bg": "–ë–æ–ª–∞—Ç–∞", "coordinates": {"lat": 43.433, "lng": 28.467}, "region": "Dobrich", "type": "nature", "facilities": {"nature_reserve": true, "parking": true}, "description": "Horseshoe-shaped bay protected by red cliffs, a former fishing cove.", "description_bg": "–ó–∞–ª–∏–≤ –≤—ä–≤ —Ñ–æ—Ä–º–∞ –Ω–∞ –ø–æ–¥–∫–æ–≤–∞, –∑–∞—â–∏—Ç–µ–Ω –æ—Ç —á–µ—Ä–≤–µ–Ω–∏ —Å–∫–∞–ª–∏, –±–∏–≤—à —Ä–∏–±–∞—Ä—Å–∫–∏ –ø—Ä–∏—Å—Ç–∞–Ω." },
                { "id": "rusalka", "name": "Rusalka", "name_bg": "–†—É—Å–∞–ª–∫–∞", "coordinates": {"lat": 43.411, "lng": 28.508}, "region": "Dobrich", "type": "resort", "facilities": {"resort_complex": true, "scenic": true}, "description": "Rocky coves and small beaches within a holiday resort.", "description_bg": "–°–∫–∞–ª—ä–ø–∏ –∑–∞–ª–∏–≤—á–µ—Ç–∞ –∏ –º–∞–ª–∫–∏ –ø–ª–∞–∂–æ–≤–µ –≤ —Ä–∞–º–∫–∏—Ç–µ –Ω–∞ –≤–∞–∫–∞–Ω—Ü–∏–æ–Ω–µ–Ω –∫–æ–º–ø–ª–µ–∫—Å." },
                { "id": "kavarna", "name": "Kavarna Central Beach", "name_bg": "–ö–∞–≤–∞—Ä–Ω–∞ - –¶–µ–Ω—Ç—Ä–∞–ª–µ–Ω", "coordinates": {"lat": 43.419, "lng": 28.344}, "region": "Dobrich", "type": "urban", "facilities": {"lifeguards": true, "restaurants": true}, "description": "The main city beach of Kavarna, located in a calm bay.", "description_bg": "–û—Å–Ω–æ–≤–Ω–∏—è—Ç –≥—Ä–∞–¥—Å–∫–∏ –ø–ª–∞–∂ –Ω–∞ –ö–∞–≤–∞—Ä–Ω–∞, —Ä–∞–∑–ø–æ–ª–æ–∂–µ–Ω –≤ —Å–ø–æ–∫–æ–µ–Ω –∑–∞–ª–∏–≤." },
                { "id": "topola", "name": "Topola", "name_bg": "–¢–æ–ø–æ–ª–∞", "coordinates": {"lat": 43.376, "lng": 28.257}, "region": "Dobrich", "type": "resort", "facilities": {"resort_complex": true, "scenic": true}, "description": "Known for its golf courses and therapeutic white mud.", "description_bg": "–ò–∑–≤–µ—Å—Ç–µ–Ω —Å—ä—Å —Å–≤–æ–∏—Ç–µ –≥–æ–ª—Ñ –∏–≥—Ä–∏—â–∞ –∏ –ª–µ—á–µ–±–Ω–∞ –±—è–ª–∞ –∫–∞–ª." },
                { "id": "balchik_central", "name": "Balchik Central", "name_bg": "–ë–∞–ª—á–∏–∫ - –¶–µ–Ω—Ç—Ä–∞–ª–µ–Ω", "coordinates": {"lat": 43.407, "lng": 28.163}, "region": "Dobrich", "type": "urban", "facilities": {"lifeguards": true, "restaurants": true}, "description": "City beach near the famous Balchik Palace and Botanical Garden.", "description_bg": "–ì—Ä–∞–¥—Å–∫–∏ –ø–ª–∞–∂ –¥–æ –∏–∑–≤–µ—Å—Ç–Ω–∏—è –î–≤–æ—Ä–µ—Ü –∏ –ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∞—Ç–∞ –≥—Ä–∞–¥–∏–Ω–∞ –≤ –ë–∞–ª—á–∏–∫." },
                { "id": "albena", "name": "Albena Beach", "name_bg": "–ê–ª–±–µ–Ω–∞", "coordinates": {"lat": 43.367, "lng": 28.083}, "region": "Dobrich", "type": "resort", "facilities": {"lifeguards": true, "blueflag": true, "family": true, "medical": true}, "description": "Family-friendly resort with mineral springs and a vast sandy beach.", "description_bg": "–°–µ–º–µ–µ–Ω –∫—É—Ä–æ—Ä—Ç —Å –º–∏–Ω–µ—Ä–∞–ª–Ω–∏ –∏–∑–≤–æ—Ä–∏ –∏ –æ–≥—Ä–æ–º–µ–Ω –ø—è—Å—ä—á–µ–Ω –ø–ª–∞–∂." },
                { "id": "kranevo", "name": "Kranevo", "name_bg": "–ö—Ä–∞–Ω–µ–≤–æ", "coordinates": {"lat": 43.340, "lng": 28.066}, "region": "Dobrich", "type": "resort", "facilities": {"lifeguards": true, "restaurants": true}, "description": "A long and wide beach connecting to Albena's beach to the north.", "description_bg": "–î—ä–ª—ä–≥ –∏ —à–∏—Ä–æ–∫ –ø–ª–∞–∂, –∫–æ–π—Ç–æ —Å–µ —Å–≤—ä—Ä–∑–≤–∞ —Å –ø–ª–∞–∂–∞ –Ω–∞ –ê–ª–±–µ–Ω–∞ –Ω–∞ —Å–µ–≤–µ—Ä." },
                { "id": "golden_sands", "name": "Golden Sands", "name_bg": "–ó–ª–∞—Ç–Ω–∏ –ø—è—Å—ä—Ü–∏", "coordinates": {"lat": 43.283, "lng": 28.033}, "region": "Varna", "type": "resort", "facilities": {"lifeguards": true, "blueflag": true, "medical": true, "restaurants": true, "hotels": true}, "description": "Major resort with fine golden sand and excellent facilities.", "description_bg": "–ì–æ–ª—è–º –∫—É—Ä–æ—Ä—Ç —Å —Ñ–∏–Ω –∑–ª–∞—Ç–µ–Ω –ø—è—Å—ä–∫ –∏ –æ—Ç–ª–∏—á–Ω–∏ —Å—ä–æ—Ä—ä–∂–µ–Ω–∏—è." },
                { "id": "saints_constantine", "name": "Sts. Constantine & Helena", "name_bg": "–°–≤. –°–≤. –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –∏ –ï–ª–µ–Ω–∞", "coordinates": {"lat": 43.232, "lng": 28.010}, "region": "Varna", "type": "resort", "facilities": {"lifeguards": true, "restaurants": true}, "description": "Bulgaria's oldest seaside resort, known for its spas.", "description_bg": "–ù–∞–π-—Å—Ç–∞—Ä–∏—è—Ç –º–æ—Ä—Å–∫–∏ –∫—É—Ä–æ—Ä—Ç –≤ –ë—ä–ª–≥–∞—Ä–∏—è, –∏–∑–≤–µ—Å—Ç–µ–Ω —Å—ä—Å —Å–≤–æ–∏—Ç–µ —Å–ø–∞ —Ü–µ–Ω—Ç—Ä–æ–≤–µ." },
                { "id": "varna_beach", "name": "Varna Beach", "name_bg": "–í–∞—Ä–Ω–∞ - –¶–µ–Ω—Ç—Ä–∞–ª–µ–Ω", "coordinates": {"lat": 43.205, "lng": 27.916}, "region": "Varna", "type": "urban", "facilities": {"lifeguards": true, "urban": true, "transport": true, "restaurants": true, "shops": true}, "description": "Main city beach accessible by public transport, next to the Sea Garden.", "description_bg": "–û—Å–Ω–æ–≤–Ω–∏—è—Ç –≥—Ä–∞–¥—Å–∫–∏ –ø–ª–∞–∂, –¥–æ—Å—Ç—ä–ø–µ–Ω —Å –æ–±—â–µ—Å—Ç–≤–µ–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –¥–æ –ú–æ—Ä—Å–∫–∞—Ç–∞ –≥—Ä–∞–¥–∏–Ω–∞." },
                { "id": "asparuhovo", "name": "Asparuhovo Beach", "name_bg": "–ê—Å–ø–∞—Ä—É—Ö–æ–≤–æ", "coordinates": {"lat": 43.181, "lng": 27.915}, "region": "Varna", "type": "urban", "facilities": {"lifeguards": true, "restaurants": true}, "description": "A large beach in a Varna suburb, south of the Asparuhov Bridge.", "description_bg": "–ì–æ–ª—è–º –ø–ª–∞–∂ –≤ –ø—Ä–µ–¥–≥—Ä–∞–¥–∏–µ –Ω–∞ –í–∞—Ä–Ω–∞, —é–∂–Ω–æ –æ—Ç –ê—Å–ø–∞—Ä—É—Ö–æ–≤–∏—è –º–æ—Å—Ç." },
                { "id": "fichoza", "name": "Fichoza", "name_bg": "–§–∏—á–æ–∑–∞", "coordinates": {"lat": 43.136, "lng": 27.937}, "region": "Varna", "type": "wild", "facilities": {"camping": true}, "description": "A series of small, wild beaches popular with locals and campers.", "description_bg": "–ü–æ—Ä–µ–¥–∏—Ü–∞ –æ—Ç –º–∞–ª–∫–∏, –¥–∏–≤–∏ –ø–ª–∞–∂–æ–≤–µ, –ø–æ–ø—É–ª—è—Ä–Ω–∏ —Å—Ä–µ–¥ –º–µ—Å—Ç–Ω–∏—Ç–µ –∏ –∫—ä–º–ø–∏–Ω–≥—É–≤–∞—â–∏—Ç–µ." },
                { "id": "kamchia", "name": "Kamchia", "name_bg": "–ö–∞–º—á–∏—è", "coordinates": {"lat": 43.023, "lng": 27.886}, "region": "Varna", "type": "nature", "facilities": {"lifeguards": true, "nature_reserve": true}, "description": "A vast beach where the Kamchia River meets the sea, part of a UNESCO biosphere reserve.", "description_bg": "–û–≥—Ä–æ–º–µ–Ω –ø–ª–∞–∂, –∫—ä–¥–µ—Ç–æ —Ä–µ–∫–∞ –ö–∞–º—á–∏—è —Å–µ –≤–ª–∏–≤–∞ –≤ –º–æ—Ä–µ—Ç–æ, —á–∞—Å—Ç –æ—Ç –±–∏–æ—Å—Ñ–µ—Ä–µ–Ω —Ä–µ–∑–µ—Ä–≤–∞—Ç –Ω–∞ –Æ–ù–ï–°–ö–û." },
                { "id": "shkorpilovtsi", "name": "Shkorpilovtsi Beach", "name_bg": "–®–∫–æ—Ä–ø–∏–ª–æ–≤—Ü–∏", "coordinates": {"lat": 42.966, "lng": 27.889}, "region": "Varna", "type": "wild", "facilities": {"camping": true, "length_km": 13}, "description": "Longest beach in Bulgaria, known for its wild nature and wide sandy strip.", "description_bg": "–ù–∞–π-–¥—ä–ª–≥–∏—è—Ç –ø–ª–∞–∂ –≤ –ë—ä–ª–≥–∞—Ä–∏—è, –∏–∑–≤–µ—Å—Ç–µ–Ω —Å—ä—Å —Å–≤–æ—è—Ç–∞ –¥–∏–≤–∞ –ø—Ä–∏—Ä–æ–¥–∞ –∏ —à–∏—Ä–æ–∫–∞ –ø—è—Å—ä—á–Ω–∞ –∏–≤–∏—Ü–∞." },
                { "id": "byala", "name": "Byala Beach", "name_bg": "–ë—è–ª–∞", "coordinates": {"lat": 42.875, "lng": 27.888}, "region": "Varna", "type": "urban", "facilities": {"lifeguards": true, "restaurants": true}, "description": "Known for its clean water and the nearby Palaeontological site at the White Cliffs.", "description_bg": "–ò–∑–≤–µ—Å—Ç–µ–Ω —Å —á–∏—Å—Ç–∞—Ç–∞ —Å–∏ –≤–æ–¥–∞ –∏ –±–ª–∏–∑–∫–∏—è –ø–∞–ª–µ–æ–Ω—Ç–æ–ª–æ–≥–∏—á–µ–Ω –æ–±–µ–∫—Ç –ø—Ä–∏ –ë–µ–ª–∏—Ç–µ —Å–∫–∞–ª–∏." },
                { "id": "obzor", "name": "Obzor Beach", "name_bg": "–û–±–∑–æ—Ä", "coordinates": {"lat": 42.821, "lng": 27.880}, "region": "Burgas", "type": "resort", "facilities": {"lifeguards": true, "restaurants": true}, "description": "A long beach strip located halfway between Varna and Burgas.", "description_bg": "–î—ä–ª–≥–∞ –ø–ª–∞–∂–Ω–∞ –∏–≤–∏—Ü–∞, —Ä–∞–∑–ø–æ–ª–æ–∂–µ–Ω–∞ –ø–æ —Å—Ä–µ–¥–∞—Ç–∞ –º–µ–∂–¥—É –í–∞—Ä–Ω–∞ –∏ –ë—É—Ä–≥–∞—Å." },
                
                // South Coast
                { "id": "irakli", "name": "Irakli Beach", "name_bg": "–ò—Ä–∞–∫–ª–∏", "coordinates": {"lat": 42.775, "lng": 27.872}, "region": "Burgas", "type": "wild", "facilities": {"nudist_friendly": true, "camping": true}, "description": "Protected area with pristine nature and a river mouth, popular with campers.", "description_bg": "–ó–∞—â–∏—Ç–µ–Ω–∞ –∑–æ–Ω–∞ —Å –¥–µ–≤—Å—Ç–≤–µ–Ω–∞ –ø—Ä–∏—Ä–æ–¥–∞ –∏ —É—Å—Ç–∏–µ –Ω–∞ —Ä–µ–∫–∞, –ø–æ–ø—É–ª—è—Ä–Ω–∞ —Å—Ä–µ–¥ –∫—ä–º–ø–∏–Ω–≥—É–≤–∞—â–∏—Ç–µ." },
                { "id": "elenite", "name": "Elenite", "name_bg": "–ï–ª–µ–Ω–∏—Ç–µ", "coordinates": {"lat": 42.715, "lng": 27.795}, "region": "Burgas", "type": "resort", "facilities": {"lifeguards": true, "resort_complex": true}, "description": "A private-access resort beach at the foot of the Stara Planina mountain.", "description_bg": "–ß–∞—Å—Ç–µ–Ω –∫—É—Ä–æ—Ä—Ç–µ–Ω –ø–ª–∞–∂ –≤ –ø–æ–¥–Ω–æ–∂–∏–µ—Ç–æ –Ω–∞ –°—Ç–∞—Ä–∞ –ø–ª–∞–Ω–∏–Ω–∞." },
                { "id": "svetivlas_central", "name": "Sveti Vlas Central", "name_bg": "–°–≤–µ—Ç–∏ –í–ª–∞—Å - –¶–µ–Ω—Ç—Ä–∞–ª–µ–Ω", "coordinates": {"lat": 42.709, "lng": 27.760}, "region": "Burgas", "type": "resort", "facilities": {"lifeguards": true, "blueflag": true}, "description": "A clean, well-maintained beach next to the modern Marina Dinevi yacht port.", "description_bg": "–ß–∏—Å—Ç, –¥–æ–±—Ä–µ –ø–æ–¥–¥—ä—Ä–∂–∞–Ω –ø–ª–∞–∂ –¥–æ –º–æ–¥–µ—Ä–Ω–æ—Ç–æ —è—Ö—Ç–µ–Ω–æ –ø—Ä–∏—Å—Ç–∞–Ω–∏—â–µ –ú–∞—Ä–∏–Ω–∞ –î–∏–Ω–µ–≤–∏." },
                { "id": "sunny_beach", "name": "Sunny Beach", "name_bg": "–°–ª—ä–Ω—á–µ–≤ –±—Ä—è–≥", "coordinates": {"lat": 42.688, "lng": 27.714}, "region": "Burgas", "type": "resort", "facilities": {"lifeguards": true, "blueflag": true, "nightlife": true, "restaurants": true, "hotels": true}, "description": "Largest and most famous beach resort with vibrant nightlife.", "description_bg": "–ù–∞–π-–≥–æ–ª–µ–º–∏—è—Ç –∏ –∏–∑–≤–µ—Å—Ç–µ–Ω –ø–ª–∞–∂–µ–Ω –∫—É—Ä–æ—Ä—Ç —Å –æ–∂–∏–≤–µ–Ω –Ω–æ—â–µ–Ω –∂–∏–≤–æ—Ç." },
                { "id": "nessebar_south", "name": "Nessebar South", "name_bg": "–ù–µ—Å–µ–±—ä—Ä - –Æ–∂–µ–Ω", "coordinates": {"lat": 42.653, "lng": 27.721}, "region": "Burgas", "type": "urban", "facilities": {"lifeguards": true, "restaurants": true}, "description": "The main beach of the new town of Nessebar, offering views to the old town.", "description_bg": "–û—Å–Ω–æ–≤–Ω–∏—è—Ç –ø–ª–∞–∂ –Ω–∞ –Ω–æ–≤–∏—è –≥—Ä–∞–¥ –Ω–∞ –ù–µ—Å–µ–±—ä—Ä, —Å –≥–ª–µ–¥–∫–∞ –∫—ä–º —Å—Ç–∞—Ä–∏—è –≥—Ä–∞–¥." },
                { "id": "pomorie", "name": "Pomorie East", "name_bg": "–ü–æ–º–æ—Ä–∏–µ - –ò–∑—Ç–æ—á–µ–Ω", "coordinates": {"lat": 42.564, "lng": 27.636}, "region": "Burgas", "type": "urban", "facilities": {"lifeguards": true, "restaurants": true}, "description": "Famous for its dark, iron-rich sand and the nearby Pomorie salt lake.", "description_bg": "–ò–∑–≤–µ—Å—Ç–µ–Ω —Å —Ç—ä–º–Ω–∏—è —Å–∏, –±–æ–≥–∞—Ç –Ω–∞ –∂–µ–ª—è–∑–æ –ø—è—Å—ä–∫ –∏ –±–ª–∏–∑–∫–æ—Ç–æ –ü–æ–º–æ—Ä–∏–π—Å–∫–æ –µ–∑–µ—Ä–æ." },
                { "id": "burgas_north", "name": "Burgas North", "name_bg": "–ë—É—Ä–≥–∞—Å - –°–µ–≤–µ—Ä–µ–Ω", "coordinates": {"lat": 42.508, "lng": 27.481}, "region": "Burgas", "type": "urban", "facilities": {"lifeguards": true, "sea_garden": true}, "description": "The main city beach next to the famous Sea Garden.", "description_bg": "–û—Å–Ω–æ–≤–Ω–∏—è—Ç –≥—Ä–∞–¥—Å–∫–∏ –ø–ª–∞–∂ –¥–æ –∏–∑–≤–µ—Å—Ç–Ω–∞—Ç–∞ –ú–æ—Ä—Å–∫–∞ –≥—Ä–∞–¥–∏–Ω–∞." },
                { "id": "kraymorie", "name": "Kraymorie", "name_bg": "–ö—Ä–∞–π–º–æ—Ä–∏–µ", "coordinates": {"lat": 42.441, "lng": 27.514}, "region": "Burgas", "type": "urban", "facilities": {"lifeguards": true, "restaurants": true}, "description": "A small beach in a Burgas suburb, popular with local families.", "description_bg": "–ú–∞–ª—ä–∫ –ø–ª–∞–∂ –≤ –ø—Ä–µ–¥–≥—Ä–∞–¥–∏–µ –Ω–∞ –ë—É—Ä–≥–∞—Å, –ø–æ–ø—É–ª—è—Ä–µ–Ω —Å—Ä–µ–¥ –º–µ—Å—Ç–Ω–∏—Ç–µ —Å–µ–º–µ–π—Å—Ç–≤–∞." },
                { "id": "chernomorets", "name": "Chernomorets Central", "name_bg": "–ß–µ—Ä–Ω–æ–º–æ—Ä–µ—Ü - –¶–µ–Ω—Ç—Ä–∞–ª–µ–Ω", "coordinates": {"lat": 42.446, "lng": 27.641}, "region": "Burgas", "type": "urban", "facilities": {"lifeguards": true}, "description": "The main beach of the town of Chernomorets.", "description_bg": "–û—Å–Ω–æ–≤–Ω–∏—è—Ç –ø–ª–∞–∂ –Ω–∞ –≥—Ä–∞–¥ –ß–µ—Ä–Ω–æ–º–æ—Ä–µ—Ü." },
                { "id": "gradina", "name": "Gradina Camping", "name_bg": "–ö—ä–º–ø–∏–Ω–≥ –ì—Ä–∞–¥–∏–Ω–∞", "coordinates": {"lat": 42.417, "lng": 27.671}, "region": "Burgas", "type": "wild", "facilities": {"lifeguards": true, "camping": true, "water_sports": true}, "description": "Famous camping beach, popular for kitesurfing and windsurfing.", "description_bg": "–ò–∑–≤–µ—Å—Ç–µ–Ω –∫—ä–º–ø–∏–Ω–≥ –ø–ª–∞–∂, –ø–æ–ø—É–ª—è—Ä–µ–Ω –∑–∞ –∫–∞–π—Ç—Å—ä—Ä—Ñ –∏ —É–∏–Ω–¥—Å—ä—Ä—Ñ." },
                { "id": "sozopol_harmanite", "name": "Sozopol - Harmanite", "name_bg": "–°–æ–∑–æ–ø–æ–ª - –•–∞—Ä–º–∞–Ω–∏—Ç–µ", "coordinates": {"lat": 42.413, "lng": 27.695}, "region": "Burgas", "type": "urban", "facilities": {"lifeguards": true, "blueflag": true, "restaurants": true}, "description": "Popular beach in the new town of Sozopol.", "description_bg": "–ü–æ–ø—É–ª—è—Ä–µ–Ω –ø–ª–∞–∂ –≤ –Ω–æ–≤–∏—è –≥—Ä–∞–¥ –Ω–∞ –°–æ–∑–æ–ø–æ–ª." },
                { "id": "kavatsite", "name": "Kavatsite", "name_bg": "–ö–∞–≤–∞—Ü–∏—Ç–µ", "coordinates": {"lat": 42.390, "lng": 27.705}, "region": "Burgas", "type": "wild", "facilities": {"lifeguards": true, "camping": true}, "description": "A long sandy beach south of Sozopol, bordered by a forest.", "description_bg": "–î—ä–ª—ä–≥ –ø—è—Å—ä—á–µ–Ω –ø–ª–∞–∂ —é–∂–Ω–æ –æ—Ç –°–æ–∑–æ–ø–æ–ª, –≥—Ä–∞–Ω–∏—á–µ—â —Å –≥–æ—Ä–∞." },
                { "id": "dyuni", "name": "Dyuni Beach", "name_bg": "–î—é–Ω–∏", "coordinates": {"lat": 42.365, "lng": 27.714}, "region": "Burgas", "type": "resort", "facilities": {"lifeguards": true, "resort_complex": true, "water_sports": true}, "description": "Long sandy beach part of a holiday resort complex.", "description_bg": "–î—ä–ª—ä–≥ –ø—è—Å—ä—á–µ–Ω –ø–ª–∞–∂, —á–∞—Å—Ç –æ—Ç –∫—É—Ä–æ—Ä—Ç–µ–Ω –∫–æ–º–ø–ª–µ–∫—Å." },
                { "id": "arkutino", "name": "Arkutino", "name_bg": "–ê—Ä–∫—É—Ç–∏–Ω–æ", "coordinates": {"lat": 42.338, "lng": 27.739}, "region": "Burgas", "type": "nature", "facilities": {"nature_reserve": true}, "description": "Pristine beach known for its sand lilies, part of the Ropotamo Reserve.", "description_bg": "–î–µ–≤—Å—Ç–≤–µ–Ω –ø–ª–∞–∂, –∏–∑–≤–µ—Å—Ç–µ–Ω —Å—ä—Å —Å–≤–æ–∏—Ç–µ –ø—è—Å—ä—á–Ω–∏ –ª–∏–ª–∏–∏, —á–∞—Å—Ç –æ—Ç —Ä–µ–∑–µ—Ä–≤–∞—Ç –†–æ–ø–æ—Ç–∞–º–æ." },
                { "id": "primorsko_north", "name": "Primorsko North", "name_bg": "–ü—Ä–∏–º–æ—Ä—Å–∫–æ - –°–µ–≤–µ—Ä–µ–Ω", "coordinates": {"lat": 42.275, "lng": 27.755}, "region": "Burgas", "type": "resort", "facilities": {"lifeguards": true, "blueflag": true, "dunes": true, "restaurants": true}, "description": "Wide beach with impressive sand dunes, separated from the town by a river.", "description_bg": "–®–∏—Ä–æ–∫ –ø–ª–∞–∂ —Å –≤–ø–µ—á–∞—Ç–ª—è–≤–∞—â–∏ –ø—è—Å—ä—á–Ω–∏ –¥—é–Ω–∏, –æ—Ç–¥–µ–ª–µ–Ω –æ—Ç –≥—Ä–∞–¥–∞ —Å —Ä–µ–∫–∞." },
                { "id": "perla", "name": "Perla Beach", "name_bg": "–ü–µ—Ä–ª–∞", "coordinates": {"lat": 42.290, "lng": 27.750}, "region": "Burgas", "type": "wild", "facilities": {"scenic": true}, "description": "A quiet beach located near the former residence of Todor Zhivkov.", "description_bg": "–¢–∏—Ö –ø–ª–∞–∂, —Ä–∞–∑–ø–æ–ª–æ–∂–µ–Ω –¥–æ –±–∏–≤—à–∞—Ç–∞ —Ä–µ–∑–∏–¥–µ–Ω—Ü–∏—è –Ω–∞ –¢–æ–¥–æ—Ä –ñ–∏–≤–∫–æ–≤." },
                { "id": "kiten_atliman", "name": "Kiten - Atliman", "name_bg": "–ö–∏—Ç–µ–Ω - –ê—Ç–ª–∏–º–∞–Ω", "coordinates": {"lat": 42.245, "lng": 27.772}, "region": "Burgas", "type": "resort", "facilities": {"lifeguards": true, "bay": true, "family": true}, "description": "Calm bay beach, very suitable for families with children.", "description_bg": "–°–ø–æ–∫–æ–µ–Ω –∑–∞–ª–∏–≤–µ–Ω –ø–ª–∞–∂, –º–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â –∑–∞ —Å–µ–º–µ–π—Å—Ç–≤–∞ —Å –¥–µ—Ü–∞." },
                { "id": "lozenets", "name": "Lozenets Beach", "name_bg": "–õ–æ–∑–µ–Ω–µ—Ü", "coordinates": {"lat": 42.210, "lng": 27.808}, "region": "Burgas", "type": "resort", "facilities": {"lifeguards": true, "surfing": true, "restaurants": true}, "description": "Popular with young people and water sports enthusiasts.", "description_bg": "–ü–æ–ø—É–ª—è—Ä–µ–Ω —Å—Ä–µ–¥ –º–ª–∞–¥–∏—Ç–µ —Ö–æ—Ä–∞ –∏ –ª—é–±–∏—Ç–µ–ª–∏—Ç–µ –Ω–∞ –≤–æ–¥–Ω–∏ —Å–ø–æ—Ä—Ç–æ–≤–µ." },
                { "id": "korala", "name": "Oasis/Korala", "name_bg": "–û–∞–∑–∏—Å/–ö–æ—Ä–∞–ª", "coordinates": {"lat": 42.200, "lng": 27.820}, "region": "Burgas", "type": "wild", "facilities": {"camping": true}, "description": "One of the last remaining truly wild beaches, a favorite for campers.", "description_bg": "–ï–¥–∏–Ω –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ –æ—Å—Ç–∞–Ω–∞–ª–∏ –∏—Å—Ç–∏–Ω—Å–∫–∏ –¥–∏–≤–∏ –ø–ª–∞–∂–æ–≤–µ, –ª—é–±–∏–º –Ω–∞ –∫—ä–º–ø–∏–Ω–≥—É–≤–∞—â–∏—Ç–µ." },
                { "id": "tsarevo_central", "name": "Tsarevo Central", "name_bg": "–¶–∞—Ä–µ–≤–æ - –¶–µ–Ω—Ç—Ä–∞–ª–µ–Ω", "coordinates": {"lat": 42.170, "lng": 27.854}, "region": "Burgas", "type": "urban", "facilities": {"lifeguards": true}, "description": "The small central beach of the town of Tsarevo.", "description_bg": "–ú–∞–ª–∫–∏—è—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–µ–Ω –ø–ª–∞–∂ –Ω–∞ –≥—Ä–∞–¥ –¶–∞—Ä–µ–≤–æ." },
                { "id": "nestinarka", "name": "Nestinarka", "name_bg": "–ù–µ—Å—Ç–∏–Ω–∞—Ä–∫–∞", "coordinates": {"lat": 42.160, "lng": 27.868}, "region": "Burgas", "type": "resort", "facilities": {"lifeguards": true, "camping": true}, "description": "A large camping beach just south of Tsarevo.", "description_bg": "–ì–æ–ª—è–º –∫—ä–º–ø–∏–Ω–≥ –ø–ª–∞–∂, —é–∂–Ω–æ –æ—Ç –¶–∞—Ä–µ–≤–æ." },
                { "id": "varvara", "name": "Varvara", "name_bg": "–í–∞—Ä–≤–∞—Ä–∞", "coordinates": {"lat": 42.121, "lng": 27.909}, "region": "Burgas", "type": "wild", "facilities": {"scenic": true}, "description": "A small, picturesque beach nestled among rocks, popular for diving.", "description_bg": "–ú–∞–ª—ä–∫, –∂–∏–≤–æ–ø–∏—Å–µ–Ω –ø–ª–∞–∂, —Å–≥—É—à–µ–Ω —Å—Ä–µ–¥ —Å–∫–∞–ª–∏, –ø–æ–ø—É–ª—è—Ä–µ–Ω –∑–∞ –≥–º—É—Ä–∫–∞–Ω–µ." },
                { "id": "ahtopol", "name": "Ahtopol", "name_bg": "–ê—Ö—Ç–æ–ø–æ–ª", "coordinates": {"lat": 42.095, "lng": 27.935}, "region": "Burgas", "type": "urban", "facilities": {"lifeguards": true}, "description": "The main beach of the southernmost town on the coast.", "description_bg": "–û—Å–Ω–æ–≤–Ω–∏—è—Ç –ø–ª–∞–∂ –Ω–∞ –Ω–∞–π-—é–∂–Ω–∏—è –≥—Ä–∞–¥ –ø–æ –∫—Ä–∞–π–±—Ä–µ–∂–∏–µ—Ç–æ." },
                { "id": "sinemorets_veleka", "name": "Sinemorets Veleka Beach", "name_bg": "–°–∏–Ω–µ–º–æ—Ä–µ—Ü - –í–µ–ª–µ–∫–∞", "coordinates": {"lat": 42.067, "lng": 27.973}, "region": "Burgas", "type": "nature", "facilities": {"river_mouth": true, "scenic": true}, "description": "Stunning beach where the Veleka River meets the sea, creating a sandbar.", "description_bg": "–ó–∞—à–µ–º–µ—Ç—è–≤–∞—â –ø–ª–∞–∂, –∫—ä–¥–µ—Ç–æ —Ä–µ–∫–∞ –í–µ–ª–µ–∫–∞ —Å–µ –≤–ª–∏–≤–∞ –≤ –º–æ—Ä–µ—Ç–æ, –æ–±—Ä–∞–∑—É–≤–∞–π–∫–∏ –ø—è—Å—ä—á–Ω–∞ –∫–æ—Å–∞." },
                { "id": "sinemorets_butamyata", "name": "Sinemorets Butamyata", "name_bg": "–°–∏–Ω–µ–º–æ—Ä–µ—Ü - –ë—É—Ç–∞–º—è—Ç–∞", "coordinates": {"lat": 42.057, "lng": 27.981}, "region": "Burgas", "type": "resort", "facilities": {"lifeguards": true}, "description": "The main, southern beach of Sinemorets, located in a calm bay.", "description_bg": "–û—Å–Ω–æ–≤–Ω–∏—è—Ç, —é–∂–µ–Ω –ø–ª–∞–∂ –Ω–∞ –°–∏–Ω–µ–º–æ—Ä–µ—Ü, —Ä–∞–∑–ø–æ–ª–æ–∂–µ–Ω –≤ —Å–ø–æ–∫–æ–µ–Ω –∑–∞–ª–∏–≤." },
                { "id": "lipite", "name": "Lipite", "name_bg": "–õ–∏–ø–∏—Ç–µ", "coordinates": {"lat": 42.049, "lng": 27.992}, "region": "Burgas", "type": "wild", "facilities": {"nudist_friendly": true}, "description": "A secluded wild beach accessible by a walk from Sinemorets.", "description_bg": "–£–µ–¥–∏–Ω–µ–Ω –¥–∏–≤ –ø–ª–∞–∂, –¥–æ—Å—Ç—ä–ø–µ–Ω –ø–µ—à–∞ –æ—Ç –°–∏–Ω–µ–º–æ—Ä–µ—Ü." },
                { "id": "silistar", "name": "Silistar Beach", "name_bg": "–°–∏–ª–∏—Å—Ç–∞—Ä", "coordinates": {"lat": 42.019, "lng": 28.006}, "region": "Burgas", "type": "nature", "facilities": {"protected_area": true, "camping": true}, "description": "One of the most beautiful southern beaches, located in a protected area.", "description_bg": "–ï–¥–∏–Ω –æ—Ç –Ω–∞–π-–∫—Ä–∞—Å–∏–≤–∏—Ç–µ —é–∂–Ω–∏ –ø–ª–∞–∂–æ–≤–µ, —Ä–∞–∑–ø–æ–ª–æ–∂–µ–Ω –≤ –∑–∞—â–∏—Ç–µ–Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç." },
                { "id": "rezovo", "name": "Rezovo Beach", "name_bg": "–†–µ–∑–æ–≤–æ", "coordinates": {"lat": 41.985, "lng": 28.026}, "region": "Burgas", "type": "wild", "facilities": {}, "description": "The southernmost beach in Bulgaria, right at the border with Turkey.", "description_bg": "–ù–∞–π-—é–∂–Ω–∏—è—Ç –ø–ª–∞–∂ –≤ –ë—ä–ª–≥–∞—Ä–∏—è, —Ç–æ—á–Ω–æ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ç–∞ —Å –¢—É—Ä—Ü–∏—è." }
            ]
        };
        
        const latitudes = beachData.priority_beaches.map(b => b.coordinates.lat);
        const longitudes = beachData.priority_beaches.map(b => b.coordinates.lng);
        
        try {
            if (this.isOffline) {
                console.log("Offline mode, using cached beach data.");
                return;
            }

            const weatherResponse = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${latitudes.join(',')}&longitude=${longitudes.join(',')}&hourly=temperature_2m,uv_index,wind_speed_10m,wind_direction_10m&timezone=auto`);
            const marineResponse = await fetch(`https://marine-api.open-meteo.com/v1/marine?latitude=${latitudes.join(',')}&longitude=${longitudes.join(',')}&hourly=wave_height,sea_surface_temperature&timezone=auto`);
            
            if (!weatherResponse.ok || !marineResponse.ok) {
                throw new Error('Failed to fetch weather data');
            }
            
            const weatherData = await weatherResponse.json();
            const marineData = await marineResponse.json();

            const combinedData = beachData.priority_beaches.map((beach, index) => {
                const now = new Date();
                const currentHour = now.getHours();

                const weather = weatherData[index]?.hourly;
                const marine = marineData[index]?.hourly;
                
                const waveHeight = marine?.wave_height[currentHour] ?? 'N/A';
                const waterTemp = marine?.sea_surface_temperature[currentHour] ?? 'N/A';
                const airTemp = weather?.temperature_2m[currentHour] ?? 'N/A';
                const windSpeed = weather?.wind_speed_10m[currentHour] ?? 'N/A';
                const uvIndex = weather?.uv_index[currentHour] ?? 'N/A';

                let flag = 'green';
                if (waveHeight > 2 || windSpeed > 40) {
                    flag = 'red';
                } else if (waveHeight > 1.25 || windSpeed > 25) {
                    flag = 'yellow';
                }

                return {
                    ...beach,
                    conditions: {
                        waveHeight: waveHeight.toFixed(2),
                        waterTemp: waterTemp.toFixed(1),
                        airTemp: airTemp.toFixed(1),
                        windSpeed: windSpeed.toFixed(1),
                        uvIndex: uvIndex.toFixed(1),
                        flag: flag,
                        lastUpdated: new Date().toISOString()
                    }
                };
            });
            this.beaches = combinedData;
            localStorage.setItem('beach-app-data', JSON.stringify(this.beaches));

        } catch (error) {
            console.error('Error loading beach data:', error);
            // If API fails, we rely on potentially stale cached data
            if (!this.beaches.length) {
                // If there's no cached data at all, this is a problem
                console.error("No cached data available and API fetch failed.");
            }
        }
    }

    async loadCleanlinessData() {
        const cachedCleanliness = localStorage.getItem('beach-app-cleanliness');
        if (cachedCleanliness) {
            const data = JSON.parse(cachedCleanliness);
            // Only use cache if it's less than 6 hours old
            if (new Date() - new Date(data.timestamp) < 6 * 60 * 60 * 1000) {
                this.mergeCleanlinessData(data.reports);
                return;
            }
        }
    
        if (this.isOffline) {
            console.log("Offline mode, using cached cleanliness data if available.");
            return;
        }
    
        try {
            const reports = await this.fetchRealCleanlinessData();
            this.mergeCleanlinessData(reports);
            localStorage.setItem('beach-app-cleanliness', JSON.stringify({
                timestamp: new Date().toISOString(),
                reports: reports
            }));
        } catch (error) {
            console.error("Failed to fetch real cleanliness data, using demo data.", error);
            const demoReports = this.generateDemoCleanlinessData();
            this.mergeCleanlinessData(demoReports);
        }
    }

    async fetchRealCleanlinessData() {
        console.log("Fetching real cleanliness data from Copernicus Marine Service...");
        const reports = [];

        for (const beach of this.beaches) {
            const { lat, lng } = beach.coordinates;
            // Create a small bounding box around the beach coordinates
            const bbox = `${lng - 0.01},${lat - 0.01},${lng + 0.01},${lat + 0.01}`;
            
            // Construct the WMS GetFeatureInfo URL
            const serviceUrl = 'https://nrt.cmems-du.eu/thredds/wms/cmems_obs-oc_blk_bgc-plankton_nrt_l3-multi-1km_P1D';
            const params = new URLSearchParams({
                service: 'WMS',
                version: '1.3.0',
                request: 'GetFeatureInfo',
                layers: 'CHL',
                query_layers: 'CHL',
                crs: 'EPSG:4326',
                bbox: bbox,
                width: '1',
                height: '1',
                i: '0',
                j: '0',
                info_format: 'application/json'
            });

            try {
                const response = await fetch(`${serviceUrl}?${params.toString()}`);
                if (!response.ok) {
                    throw new Error(`Copernicus API returned status ${response.status}`);
                }
                const data = await response.json();
                
                // Extract the Chlorophyll-a value
                const chlValue = data?.features?.[0]?.properties?.value;

                if (chlValue !== undefined && chlValue !== null) {
                    const value = parseFloat(chlValue);
                    let status = 'clear';
                    if (value >= 20) {
                        status = 'high';
                    } else if (value >= 5) {
                        status = 'moderate';
                    }
                    reports.push(this.createReportFromStatus(beach.id, status, value));
                } else {
                    // No data available for this point, assume clear
                    reports.push(this.createReportFromStatus(beach.id, 'clear', null));
                }

            } catch (error) {
                console.warn(`Could not fetch data for ${beach.name}: ${error.message}. Assuming clear.`);
                reports.push(this.createReportFromStatus(beach.id, 'clear', null));
            }
        }
        return reports;
    }
    
    createReportFromStatus(beach_id, status, value) {
        let report_en, report_bg;
        const valueText = value !== null ? ` (CHL: ${value.toFixed(2)} mg/m¬≥)` : '';
        
        switch (status) {
            case 'high':
                report_en = `High Chlorophyll-a concentration detected${valueText}. Widespread algae bloom likely.`;
                report_bg = `–û—Ç–∫—Ä–∏—Ç–∞ –µ –≤–∏—Å–æ–∫–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –Ω–∞ –•–ª–æ—Ä–æ—Ñ–∏–ª-a${valueText}. –í–µ—Ä–æ—è—Ç–µ–Ω –µ –º–∞—Å–æ–≤ —Ü—ä—Ñ—Ç–µ–∂ –Ω–∞ –≤–æ–¥–æ—Ä–∞—Å–ª–∏.`;
                break;
            case 'moderate':
                report_en = `Moderate Chlorophyll-a concentration detected${valueText}. Some algae patches possible.`;
                report_bg = `–û—Ç–∫—Ä–∏—Ç–∞ –µ —É–º–µ—Ä–µ–Ω–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –Ω–∞ –•–ª–æ—Ä–æ—Ñ–∏–ª-a${valueText}. –í—ä–∑–º–æ–∂–Ω–∏ —Å–∞ –ø–µ—Ç–Ω–∞ –æ—Ç –≤–æ–¥–æ—Ä–∞—Å–ª–∏.`;
                break;
            default: // clear
                report_en = `Chlorophyll-a concentration is low${valueText}. Water is expected to be clear.`;
                report_bg = `–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è—Ç–∞ –Ω–∞ –•–ª–æ—Ä–æ—Ñ–∏–ª-a –µ –Ω–∏—Å–∫–∞${valueText}. –û—á–∞–∫–≤–∞ —Å–µ –≤–æ–¥–∞—Ç–∞ –¥–∞ –µ —á–∏—Å—Ç–∞.`;
        }
        return { beach_id, status, report_en, report_bg };
    }

    generateDemoCleanlinessData() {
        const statuses = ["clear", "moderate", "high"];
        return this.beaches.map(beach => {
            const randomStatus = statuses[Math.floor(Math.random() * 2.2)]; // Skew towards clear/moderate
            return this.createReportFromStatus(beach.id, randomStatus, null);
        });
    }

    mergeCleanlinessData(reports) {
        this.beaches.forEach(beach => {
            const report = reports.find(r => r.beach_id === beach.id);
            if (report) {
                beach.cleanliness = report;
            } else {
                // This is a fallback in case a beach was missed in the reports
                beach.cleanliness = this.createReportFromStatus(beach.id, 'clear', null);
            }
        });
    }

    setupEventListeners() {
        // Mobile tabs
        document.getElementById('map-tab').addEventListener('click', () => this.setView('map'));
        document.getElementById('list-tab').addEventListener('click', () => this.setView('list'));

        // Language toggle
        document.getElementById('language-toggle').addEventListener('click', () => this.toggleLanguage());
        document.getElementById('language-toggle-desktop').addEventListener('click', () => this.toggleLanguage());

        // Modals
        document.getElementById('settings-btn').addEventListener('click', () => this.toggleModal('settings-modal', true));
        document.getElementById('settings-btn-desktop').addEventListener('click', () => this.toggleModal('settings-modal', true));
        document.getElementById('close-settings').addEventListener('click', () => this.toggleModal('settings-modal', false));
        document.querySelector('#settings-modal .modal-backdrop').addEventListener('click', () => this.toggleModal('settings-modal', false));
        
        document.getElementById('whats-new-btn').addEventListener('click', () => this.populateAndOpenWhatsNewModal());
        document.getElementById('whats-new-btn-desktop').addEventListener('click', () => this.populateAndOpenWhatsNewModal());
        document.getElementById('close-whats-new').addEventListener('click', () => this.toggleModal('whats-new-modal', false));
        document.getElementById('dismiss-whats-new').addEventListener('click', () => this.toggleModal('whats-new-modal', false));
        document.querySelector('#whats-new-modal .modal-backdrop').addEventListener('click', () => this.toggleModal('whats-new-modal', false));
        
        document.getElementById('close-modal').addEventListener('click', () => this.toggleModal('beach-modal', false));
        document.querySelector('#beach-modal .modal-backdrop').addEventListener('click', () => this.toggleModal('beach-modal', false));

        // Search and filter
        document.getElementById('search-input').addEventListener('input', (e) => this.filterAndRenderLists(e.target.value));
        document.getElementById('search-input-desktop').addEventListener('input', (e) => this.filterAndRenderLists(e.target.value));
        
        document.querySelectorAll('.filter-controls').forEach(container => {
            container.addEventListener('click', (e) => {
                if (e.target.classList.contains('filter-btn')) {
                    this.currentFilter = e.target.dataset.filter;
                    // Update both sets of filter buttons
                    document.querySelectorAll('.filter-btn').forEach(btn => {
                        btn.classList.toggle('active', btn.dataset.filter === this.currentFilter);
                    });
                    this.filterAndRenderLists(document.getElementById('search-input').value);
                }
            });
        });

        // Map controls
        document.getElementById('locate-btn').addEventListener('click', () => this.panToUserLocation());

        // Dark mode toggle
        document.getElementById('dark-mode-toggle').addEventListener('change', (e) => this.toggleDarkMode(e.target.checked));
        
        // PWA Install button
        document.getElementById('install-btn').addEventListener('click', () => this.promptInstall());

        // Share button
        document.getElementById('share-location').addEventListener('click', () => this.shareBeachLocation());
    }

    initializeMap() {
        if (this.map) return;
        try {
            this.map = L.map('map', {
                center: [42.7, 27.7], // Centered on Bulgarian coast
                zoom: 8,
                zoomControl: false, // We have custom controls
            });
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(this.map);
            this.addBeachMarkers();
            console.log("Map initialized successfully");
        } catch (e) {
            console.error("Could not initialize map:", e);
        }
    }

    addBeachMarkers() {
        if (!this.map) return;
        // Clear existing markers
        this.markers.forEach(marker => marker.remove());
        this.markers = [];

        this.beaches.forEach(beach => {
            const flagEmoji = beach.conditions.flag === 'red' ? 'üî¥' : beach.conditions.flag === 'yellow' ? 'üü°' : 'üü¢';
            const cleanlinessStatus = beach.cleanliness?.status || 'clear';

            const markerIcon = L.divIcon({
                className: 'custom-marker-icon',
                html: `<div class="flag-emoji">${flagEmoji}</div><div class="cleanliness-dot ${cleanlinessStatus}"></div>`,
                iconSize: [30, 42],
                iconAnchor: [15, 42]
            });

            const marker = L.marker([beach.coordinates.lat, beach.coordinates.lng], { icon: markerIcon })
                .addTo(this.map)
                .on('click', () => this.openBeachDetailModal(beach.id));
            
            this.markers.push(marker);
        });
    }

    renderAllLists() {
        this.renderBeachList('beach-list'); // Mobile
        this.renderBeachList('beach-list-desktop'); // Desktop
    }

    renderBeachList(containerId) {
        const listContainer = document.getElementById(containerId);
        listContainer.innerHTML = '';
        const searchTerm = (containerId.includes('desktop') ? document.getElementById('search-input-desktop') : document.getElementById('search-input')).value.toLowerCase();
        
        const filteredBeaches = this.beaches.filter(beach => {
            const name = this.currentLanguage === 'bg' ? beach.name_bg : beach.name;
            const matchesSearch = name.toLowerCase().includes(searchTerm);
            const matchesFilter = this.currentFilter === 'all' || beach.conditions.flag === this.currentFilter;
            return matchesSearch && matchesFilter;
        });

        if (filteredBeaches.length === 0) {
            listContainer.innerHTML = `<div class="no-results"><p>${this.translations[this.currentLanguage].noResults}</p></div>`;
            return;
        }

        filteredBeaches.forEach(beach => {
            const beachItem = document.createElement('div');
            beachItem.className = 'beach-item';
            beachItem.dataset.beachId = beach.id;
            beachItem.addEventListener('click', () => this.openBeachDetailModal(beach.id));

            const flagEmoji = beach.conditions.flag === 'red' ? 'üî¥' : beach.conditions.flag === 'yellow' ? 'üü°' : 'üü¢';
            const name = this.currentLanguage === 'bg' ? beach.name_bg : beach.name;
            const nameSecondary = this.currentLanguage === 'bg' ? beach.name : beach.name_bg;

            let distanceHTML = '';
            if (this.userLocation && beach.distance) {
                distanceHTML = `<span class="beach-distance">${beach.distance.toFixed(1)} km</span>`;
            }

            beachItem.innerHTML = `
                <div class="beach-item-header">
                    <div>
                        <h3 class="beach-name">${name}</h3>
                        <p class="beach-name-bg">${nameSecondary}</p>
                    </div>
                    <span>${flagEmoji}</span>
                </div>
                <div class="beach-info">
                    <div>${this.getFacilityIcons(beach.facilities)}</div>
                    ${distanceHTML}
                </div>
            `;
            listContainer.appendChild(beachItem);
        });
    }

    filterAndRenderLists() {
        this.renderAllLists();
    }

    getFacilityIcons(facilities) {
        let icons = '';
        if (facilities.lifeguards) icons += '<span class="facility-icon" title="Lifeguards"> lifeguard </span>';
        if (facilities.restaurants) icons += '<span class="facility-icon" title="Restaurants">üçΩÔ∏è</span>';
        if (facilities.blueflag) icons += '<span class="facility-icon" title="Blue Flag">üåä</span>';
        if (facilities.family) icons += '<span class="facility-icon" title="Family Friendly">üë®‚Äçüë©‚Äçüëß‚Äçüë¶</span>';
        return icons || '<span>-</span>';
    }

    openBeachDetailModal(beachId) {
        this.currentBeach = this.beaches.find(b => b.id === beachId);
        if (!this.currentBeach) return;
        
        this.refreshBeachDetailModal();
        this.toggleModal('beach-modal', true);
    }
    
    refreshBeachDetailModal() {
        if (!this.currentBeach) return;
        const beach = this.currentBeach;
        const lang = this.currentLanguage;
        
        const name = lang === 'bg' ? beach.name_bg : beach.name;
        document.getElementById('beach-modal-title').textContent = name;
        
        const flagText = this.translations[lang].flags[beach.conditions.flag];
        const flagIndicator = document.getElementById('beach-flag');
        flagIndicator.textContent = `${this.translations[lang].flagStatus}: ${flagText}`;
        flagIndicator.className = `flag-indicator ${beach.conditions.flag}`;
        
        // Conditions
        document.getElementById('wind-value').textContent = `${beach.conditions.windSpeed} km/h`;
        document.getElementById('waves-value').textContent = `${beach.conditions.waveHeight} m`;
        document.getElementById('water-temp-value').textContent = `${beach.conditions.waterTemp}¬∞C`;
        document.getElementById('air-temp-value').textContent = `${beach.conditions.airTemp}¬∞C`;
        document.getElementById('uv-index-value').textContent = `${beach.conditions.uvIndex}`;
        
        // Cleanliness
        const cleanlinessStatusEl = document.getElementById('cleanliness-status');
        cleanlinessStatusEl.textContent = this.translations[lang].algaeStatus[beach.cleanliness.status];
        cleanlinessStatusEl.className = `cleanliness-status ${beach.cleanliness.status}`;
        document.getElementById('cleanliness-report').textContent = lang === 'bg' ? beach.cleanliness.report_bg : beach.cleanliness.report_en;

        // Safety message
        document.getElementById('safety-message').textContent = this.translations[lang].safetyMessages[beach.conditions.flag];

        // Facilities
        const facilitiesEl = document.getElementById('beach-facilities');
        facilitiesEl.innerHTML = `<h4>${this.translations[lang].facilities}</h4><div class="facilities-list">${Object.keys(beach.facilities).filter(f => beach.facilities[f]).map(f => `<span class="facility-tag">${this.translations[lang].facilityNames[f] || f}</span>`).join('')}</div>`;

        // Last updated
        const lastUpdatedDate = new Date(beach.conditions.lastUpdated);
        document.getElementById('last-updated').textContent = `${this.translations[lang].lastUpdated}: ${lastUpdatedDate.toLocaleTimeString()}`;
    }

    setView(view) {
        this.currentView = view;
        document.getElementById('map-tab').classList.toggle('active', view === 'map');
        document.getElementById('list-tab').classList.toggle('active', view === 'list');

        document.getElementById('map-view').classList.toggle('active', view === 'map');
        document.getElementById('list-view').classList.toggle('active', view === 'list');
        
        document.getElementById('search-container-mobile').style.display = view === 'list' ? 'block' : 'none';

        if (view === 'map' && this.map) {
            setTimeout(() => this.map.invalidateSize(), 100);
        }
    }

    toggleModal(modalId, show) {
        const modal = document.getElementById(modalId);
        if (show) {
            modal.classList.remove('hidden');
            modal.setAttribute('aria-hidden', 'false');
        } else {
            modal.classList.add('hidden');
            modal.setAttribute('aria-hidden', 'true');
            if (modalId === 'beach-modal') {
                this.currentBeach = null;
            }
        }
    }

    requestLocation() {
        if ('geolocation' in navigator) {
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    this.userLocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    this.calculateDistances();
                    this.renderAllLists();
                    this.addUserLocationMarker();
                },
                (error) => {
                    console.error("Location access denied or failed: ", error);
                }
            );
        }
    }

    calculateDistances() {
        if (!this.userLocation) return;
        this.beaches.forEach(beach => {
            beach.distance = this.getDistance(this.userLocation, beach.coordinates);
        });
        // Sort beaches by distance
        this.beaches.sort((a, b) => (a.distance || Infinity) - (b.distance || Infinity));
    }

    getDistance(coords1, coords2) {
        const R = 6371; // Radius of the Earth in km
        const dLat = (coords2.lat - coords1.lat) * Math.PI / 180;
        const dLon = (coords2.lng - coords1.lng) * Math.PI / 180;
        const a =
            Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(coords1.lat * Math.PI / 180) * Math.cos(coords2.lat * Math.PI / 180) *
            Math.sin(dLon / 2) * Math.sin(dLon / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c;
    }

    addUserLocationMarker() {
        if (this.map && this.userLocation) {
            if (this.userLocationMarker) {
                this.userLocationMarker.remove();
            }
            const userIcon = L.divIcon({
                className: 'user-location-marker',
                html: 'üìç',
                iconSize: [20, 20]
            });
            this.userLocationMarker = L.marker([this.userLocation.lat, this.userLocation.lng], { icon: userIcon }).addTo(this.map);
        }
    }


    panToUserLocation() {
        if (this.map && this.userLocation) {
            this.map.flyTo([this.userLocation.lat, this.userLocation.lng], 12);
        } else if (!this.userLocation) {
            alert(this.translations[this.currentLanguage].locationNotEnabled);
        }
    }

    setupPWA() {
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/sw.js')
                .then(reg => console.log('SW registered: ', reg))
                .catch(err => console.log('SW registration failed: ', err));
        }

        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault();
            this.deferredPrompt = e;
            document.getElementById('install-btn').classList.remove('hidden');
        });
    }

    promptInstall() {
        if (this.deferredPrompt) {
            this.deferredPrompt.prompt();
            this.deferredPrompt.userChoice.then((choiceResult) => {
                if (choiceResult.outcome === 'accepted') {
                    console.log('User accepted the A2HS prompt');
                }
                this.deferredPrompt = null;
                document.getElementById('install-btn').classList.add('hidden');
            });
        }
    }
    
    setupNetworkHandlers() {
        this.updateOfflineStatus();
        window.addEventListener('online', () => this.updateOfflineStatus());
        window.addEventListener('offline', () => this.updateOfflineStatus());
    }

    async updateOfflineStatus() {
        this.isOffline = !navigator.onLine;
        document.getElementById('offline-indicator').classList.toggle('hidden', !this.isOffline);
        if (!this.isOffline) {
            console.log("Back online. Refreshing data...");
            // If we came back online, refresh data
            await this.loadBeachData();
            await this.loadCleanlinessData();
            this.updateAllViews();
        }
    }
    
    shareBeachLocation() {
        if (navigator.share && this.currentBeach) {
            const beach = this.currentBeach;
            const name = this.currentLanguage === 'bg' ? beach.name_bg : beach.name;
            const flagStatus = this.translations[this.currentLanguage].flags[beach.conditions.flag];
            const text = `Checking out ${name}! Current status is ${flagStatus}. #FlagWatch`;
            const url = `https://www.google.com/maps?q=${beach.coordinates.lat},${beach.coordinates.lng}`;

            navigator.share({
                title: 'FlagWatch Beach Status',
                text: text,
                url: window.location.href // Or a specific URL for the beach
            }).then(() => {
                console.log('Thanks for sharing!');
            }).catch(console.error);
        } else {
            // Fallback for browsers that don't support Web Share API
            alert(this.translations[this.currentLanguage].sharingNotSupported);
        }
    }
    
    checkWhatsNew() {
        const lastVersionSeen = localStorage.getItem('app-version-seen');
        if (lastVersionSeen !== APP_VERSION && WHATS_NEW_CONFIG.version === APP_VERSION) {
            this.populateAndOpenWhatsNewModal();
            localStorage.setItem('app-version-seen', APP_VERSION);
        }
    }
    
    populateAndOpenWhatsNewModal() {
        const whatsNewBody = document.getElementById('whats-new-body');
        const lang = this.currentLanguage;
        
        let contentHTML = '';
        WHATS_NEW_CONFIG.features.forEach(feature => {
            const title = feature.title[lang] || feature.title['en'];
            const description = feature.description[lang] || feature.description['en'];
            contentHTML += `
                <div class="settings-section">
                    <h3>${title}</h3>
                    <p>${description}</p>
                </div>
            `;
        });
        
        whatsNewBody.innerHTML = contentHTML;
        this.toggleModal('whats-new-modal', true);
    }
    
    toggleDarkMode(isDark) {
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
        this.applyTheme();
    }
    
    applyTheme() {
        const savedTheme = localStorage.getItem('theme');
        const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
        const isDark = savedTheme ? savedTheme === 'dark' : prefersDark;
        
        document.body.classList.toggle('dark-mode', isDark);
        document.getElementById('dark-mode-toggle').checked = isDark;
    }

    toggleLanguage() {
        this.currentLanguage = this.currentLanguage === 'en' ? 'bg' : 'en';
        localStorage.setItem('beach-app-language', this.currentLanguage);
        this.applyLanguage();
        this.updateAllViews();
    }

    applyLanguage() {
        const lang = this.currentLanguage;
        const translations = this.translations[lang];
        document.documentElement.lang = lang;
        
        // Update all static text content
        document.querySelectorAll('[id]').forEach(el => {
            if (translations[el.id]) {
                el.textContent = translations[el.id];
            }
        });
        
        // Update placeholders
        document.getElementById('search-input').placeholder = translations.searchPlaceholder;
        document.getElementById('search-input-desktop').placeholder = translations.searchPlaceholder;

        // Update language toggle button text
        document.getElementById('language-toggle').textContent = lang === 'en' ? 'BG' : 'EN';
        document.getElementById('language-toggle-desktop').textContent = lang === 'en' ? 'BG' : 'EN';
    }

    translations = {
        en: {
            "app-title": "FlagWatch",
            "app-title-desktop": "FlagWatch",
            "map-tab-text": "Map",
            "list-tab-text": "List",
            "wind-label": "Wind",
            "waves-label": "Waves",
            "water-temp-label": "Water Temp",
            "air-temp-label": "Air Temp",
            "uv-index-label": "UV Index",
            "cleanliness-title": "Algae Report",
            "share-location-text": "Share",
            "settings-modal-title": "Settings",
            "theme-title": "Theme",
            "dark-mode-label": "Dark Mode",
            "flag-legend-title": "Flag Legend",
            "legend-green": "Safe swimming conditions",
            "legend-yellow": "Caution advised",
            "legend-red": "Dangerous conditions",
            "algae-legend-title": "Algae Legend",
            "legend-clear": "Clear: Low Chlorophyll",
            "legend-moderate": "Moderate: Potential algae bloom",
            "legend-high": "High: Widespread algae bloom",
            "safety-tips-title": "Safety Tips",
            "whats-new-modal-title": "What's New!",
            "offline-text": "Offline Mode - Showing cached data",
            "searchPlaceholder": "Search beaches...",
            "flagStatus": "Flag Status",
            "lastUpdated": "Last updated",
            "facilities": "Facilities",
            "noResults": "No beaches match your criteria.",
            "locationNotEnabled": "Location permission is not enabled. Please enable it in your browser settings to use this feature.",
            "sharingNotSupported": "Web Share API is not supported in your browser.",
            flags: {
                green: "üü¢ Safe",
                yellow: "üü° Caution",
                red: "üî¥ Danger"
            },
            safetyMessages: {
                green: "Enjoy the water, conditions are safe for swimming.",
                yellow: "Be cautious when swimming. Conditions are moderate.",
                red: "Swimming is prohibited. Conditions are dangerous."
            },
            algaeStatus: {
                clear: "Clear",
                moderate: "Moderate",
                high: "High"
            },
            facilityNames: {
                lifeguards: "Lifeguards", blueflag: "Blue Flag", medical: "Medical", restaurants: "Restaurants", hotels: "Hotels", family: "Family Friendly", urban: "Urban", transport: "Public Transport", shops: "Shops", nature_reserve: "Nature Reserve", parking: "Parking", camping: "Camping", length_km: "Long Beach", nudist_friendly: "Nudist Friendly", nightlife: "Nightlife", sea_garden: "Sea Garden", water_sports: "Water Sports", dunes: "Dunes", bay: "Bay", surfing: "Surfing", river_mouth: "River Mouth", scenic: "Scenic View", protected_area: "Protected Area", resort_complex: "Resort Complex"
            }
        },
        bg: {
            "app-title": "–§–ª–∞–≥–£–æ—á",
            "app-title-desktop": "–§–ª–∞–≥–£–æ—á",
            "map-tab-text": "–ö–∞—Ä—Ç–∞",
            "list-tab-text": "–°–ø–∏—Å—ä–∫",
            "wind-label": "–í—è—Ç—ä—Ä",
            "waves-label": "–í—ä–ª–Ω–∏",
            "water-temp-label": "–¢–µ–º–ø. –≤–æ–¥–∞",
            "air-temp-label": "–¢–µ–º–ø. –≤—ä–∑–¥—É—Ö",
            "uv-index-label": "UV –∏–Ω–¥–µ–∫—Å",
            "cleanliness-title": "–î–æ–∫–ª–∞–¥ –∑–∞ –≤–æ–¥–æ—Ä–∞—Å–ª–∏",
            "share-location-text": "–°–ø–æ–¥–µ–ª–∏",
            "settings-modal-title": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            "theme-title": "–¢–µ–º–∞",
            "dark-mode-label": "–¢—ä–º–µ–Ω —Ä–µ–∂–∏–º",
            "flag-legend-title": "–õ–µ–≥–µ–Ω–¥–∞ –Ω–∞ —Ñ–ª–∞–≥–æ–≤–µ—Ç–µ",
            "legend-green": "–ë–µ–∑–æ–ø–∞—Å–Ω–∏ —É—Å–ª–æ–≤–∏—è –∑–∞ –ø–ª—É–≤–∞–Ω–µ",
            "legend-yellow": "–ü—Ä–µ–ø–æ—Ä—ä—á–≤–∞ —Å–µ –ø–æ–≤–∏—à–µ–Ω–æ –≤–Ω–∏–º–∞–Ω–∏–µ",
            "legend-red": "–û–ø–∞—Å–Ω–∏ —É—Å–ª–æ–≤–∏—è",
            "algae-legend-title": "–õ–µ–≥–µ–Ω–¥–∞ –∑–∞ –≤–æ–¥–æ—Ä–∞—Å–ª–∏",
            "legend-clear": "–ß–∏—Å—Ç–æ: –ù–∏—Å–∫–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ö–ª–æ—Ä–æ—Ñ–∏–ª",
            "legend-moderate": "–£–º–µ—Ä–µ–Ω–æ: –í—ä–∑–º–æ–∂–µ–Ω —Ü—ä—Ñ—Ç–µ–∂ –Ω–∞ –≤–æ–¥–æ—Ä–∞—Å–ª–∏",
            "legend-high": "–í–∏—Å–æ–∫–æ: –ú–∞—Å–æ–≤ —Ü—ä—Ñ—Ç–µ–∂ –Ω–∞ –≤–æ–¥–æ—Ä–∞—Å–ª–∏",
            "safety-tips-title": "–°—ä–≤–µ—Ç–∏ –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç",
            "whats-new-modal-title": "–ö–∞–∫–≤–æ –Ω–æ–≤–æ!",
            "offline-text": "–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º - –ü–æ–∫–∞–∑–≤–∞—Ç —Å–µ –∫–µ—à–∏—Ä–∞–Ω–∏ –¥–∞–Ω–Ω–∏",
            "searchPlaceholder": "–¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ –ø–ª–∞–∂–æ–≤–µ...",
            "flagStatus": "–°—Ç–∞—Ç—É—Å –Ω–∞ —Ñ–ª–∞–≥–∞",
            "lastUpdated": "–ü–æ—Å–ª–µ–¥–Ω–æ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ",
            "facilities": "–£–¥–æ–±—Å—Ç–≤–∞",
            "noResults": "–ù—è–º–∞ –ø–ª–∞–∂–æ–≤–µ, –æ—Ç–≥–æ–≤–∞—Ä—è—â–∏ –Ω–∞ –≤–∞—à–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏.",
            "locationNotEnabled": "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ—Ç–æ –∑–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –µ –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–æ. –ú–æ–ª—è, –∞–∫—Ç–∏–≤–∏—Ä–∞–π—Ç–µ –≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏—Ç–µ –Ω–∞ –±—Ä–∞—É–∑—ä—Ä–∞ —Å–∏, –∑–∞ –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞—Ç–µ —Ç–∞–∑–∏ —Ñ—É–Ω–∫—Ü–∏—è.",
            "sharingNotSupported": "API –∑–∞ —Å–ø–æ–¥–µ–ª—è–Ω–µ –≤ –º—Ä–µ–∂–∞—Ç–∞ –Ω–µ —Å–µ –ø–æ–¥–¥—ä—Ä–∂–∞ –æ—Ç –≤–∞—à–∏—è –±—Ä–∞—É–∑—ä—Ä.",
            flags: {
                green: "üü¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ",
                yellow: "üü° –í–Ω–∏–º–∞–Ω–∏–µ",
                red: "üî¥ –û–ø–∞—Å–Ω–æ"
            },
            safetyMessages: {
                green: "–ù–∞—Å–ª–∞–∂–¥–∞–≤–∞–π—Ç–µ —Å–µ –Ω–∞ –≤–æ–¥–∞—Ç–∞, —É—Å–ª–æ–≤–∏—è—Ç–∞ —Å–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∏ –∑–∞ –ø–ª—É–≤–∞–Ω–µ.",
                yellow: "–ë—ä–¥–µ—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª–Ω–∏ –ø—Ä–∏ –ø–ª—É–≤–∞–Ω–µ. –£—Å–ª–æ–≤–∏—è—Ç–∞ —Å–∞ —É–º–µ—Ä–µ–Ω–∏.",
                red: "–ü–ª—É–≤–∞–Ω–µ—Ç–æ –µ –∑–∞–±—Ä–∞–Ω–µ–Ω–æ. –£—Å–ª–æ–≤–∏—è—Ç–∞ —Å–∞ –æ–ø–∞—Å–Ω–∏."
            },
            algaeStatus: {
                clear: "–ß–∏—Å—Ç–æ",
                moderate: "–£–º–µ—Ä–µ–Ω–æ",
                high: "–í–∏—Å–æ–∫–æ"
            },
            facilityNames: {
                lifeguards: "–°–ø–∞—Å–∏—Ç–µ–ª–∏", blueflag: "–°–∏–Ω —Ñ–ª–∞–≥", medical: "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏ –ø—É–Ω–∫—Ç", restaurants: "–†–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∏", hotels: "–•–æ—Ç–µ–ª–∏", family: "–ü–æ–¥—Ö–æ–¥—è—â –∑–∞ —Å–µ–º–µ–π—Å—Ç–≤–∞", urban: "–ì—Ä–∞–¥—Å–∫–∏", transport: "–û–±—â–µ—Å—Ç–≤–µ–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", shops: "–ú–∞–≥–∞–∑–∏–Ω–∏", nature_reserve: "–ü—Ä–∏—Ä–æ–¥–µ–Ω —Ä–µ–∑–µ—Ä–≤–∞—Ç", parking: "–ü–∞—Ä–∫–∏–Ω–≥", camping: "–ö—ä–º–ø–∏–Ω–≥", length_km: "–î—ä–ª–≥–∞ –∏–≤–∏—Ü–∞", nudist_friendly: "–ù—É–¥–∏—Å—Ç–∫–∏", nightlife: "–ù–æ—â–µ–Ω –∂–∏–≤–æ—Ç", sea_garden: "–ú–æ—Ä—Å–∫–∞ –≥—Ä–∞–¥–∏–Ω–∞", water_sports: "–í–æ–¥–Ω–∏ —Å–ø–æ—Ä—Ç–æ–≤–µ", dunes: "–î—é–Ω–∏", bay: "–ó–∞–ª–∏–≤", surfing: "–°—ä—Ä—Ñ", river_mouth: "–£—Å—Ç–∏–µ –Ω–∞ —Ä–µ–∫–∞", scenic: "–ñ–∏–≤–æ–ø–∏—Å–Ω–∞ –≥–ª–µ–¥–∫–∞", protected_area: "–ó–∞—â–∏—Ç–µ–Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç", resort_complex: "–ö—É—Ä–æ—Ä—Ç–µ–Ω –∫–æ–º–ø–ª–µ–∫—Å"
            }
        }
    };
}

// Initialize the app when the DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    new BeachSafetyApp();
});